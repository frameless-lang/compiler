name: CI

on:
  push:
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:
  build:
    name: Test
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]
        include:
        - os: ubuntu-latest
          EXE: strictly
          PLATFORM: linux-x64
        - os: macos-latest
          EXE: strictly
          PLATFORM: macos-x64
        # - os: windows-latest
        #   EXE: strictly.exe
        #   PLATFORM: windows-x64
    runs-on: ${{ matrix.os }}

    steps:
      - name: Check out source code
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - uses: haskell/actions/setup@v1

      - uses: actions/setup-node@v2

      - name: Install Dependencies
        run: yarn install

      - name: Test
        run: yarn run test

      - name: Build mac
        if: matrix.os == 'macos-latest'
        run: cabal install exe:strictly --install-method=copy --overwrite-policy=always --installdir=dist --ghc-options="-optl-static"

      - name: build linux
        if: matrix.os == 'ubuntu-latest'
        run: cabal install exe:strictly --install-method=copy --overwrite-policy=always --installdir=dist -enable-static --disable-executable-dynamic --ld-options=-static

      - uses: actions/upload-artifact@v2
        with:
          name: ${{matrix.PLATFORM}}
          path: ./dist/${{matrix.TARGET}}
          if-no-files-found: error

  release:
    name: release build
    if: ${{ github.event_name == 'push' && github.ref == 'refs/heads/main' }}
    runs-on: ubuntu-latest
    needs: [build]
    steps:
      - uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - uses: actions/download-artifact@v2
        with:
          path: dist

      - name: Executable
        run: chmod -R +x dist/

      - name: Install Dependencies
        run: yarn install

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: npx semantic-release